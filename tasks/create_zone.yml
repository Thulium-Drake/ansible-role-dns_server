---
- name: 'Check zone'
  ansible.builtin.uri:
    url: "http://127.0.0.1:8081/api/v1/servers/localhost/zones/{{ zone }}."
    method: 'GET'
    headers:
      X-API-Key: "{{ dns_server_api_key }}"
    status_code:
      - 200
      - 404
      - 422
  register: 'zone_api_status'

- name: 'Ensure primary zones'
  when:
    - zone_api_status['status'] != 200
    - dns_server_role == 'primary'
  block:
    - name: 'Ensure primary zone'
      ansible.builtin.uri:
        url: "http://127.0.0.1:8081/api/v1/servers/localhost/zones"
        method: 'POST'
        body:
          name: "{{ zone }}."
          kind: 'master'
          nameservers:
            - "{{ dns_server_ns_name }}."
        body_format: 'json'
        headers:
          X-API-Key: "{{ dns_server_api_key }}"
        status_code: 201
      changed_when: true

    - name: 'Render default empty zone'
      ansible.builtin.template:
        src: 'default_zone.j2'
        dest: "/tmp/{{ zone }}.txt"
        mode: 0600

    - name: 'Import default empty zone'
      ansible.builtin.command: |
        pdnsutil load-zone {{ zone }} /tmp/{{ zone }}.txt
      changed_when: true

- name: 'Ensure secondary zone'
  ansible.builtin.uri:
    url: "http://127.0.0.1:8081/api/v1/servers/localhost/zones"
    method: 'POST'
    body:
      name: "{{ zone }}."
      kind: 'slave'
      masters: "{{ dns_server_primaries }}"
    body_format: 'json'
    headers:
      X-API-Key: "{{ dns_server_api_key }}"
    status_code: 201
  changed_when: true
  when:
    - zone_api_status['status'] != 200
    - dns_server_role == 'slave'

- name: "Activate DNSUPDATE TSIG keys for {{ zone }}"
  ansible.builtin.shell: |
    set -o pipefail
    result=1
    pdnsutil get-meta {{ zone }} TSIG-ALLOW-DNSUPDATE | grep {{ dns_server_tsig_key_name }}
    ret=$?
    if [ $ret -eq 1 ]
    then
      pdnsutil activate-tsig-key {{ zone }} {{ dns_server_tsig_key_name }} {{ dns_server_role }}
      pdnsutil set-meta {{ zone }} TSIG-ALLOW-DNSUPDATE {{ dns_server_tsig_key_name }}
      result=2
    else
      result=0
    fi
    exit $result
  args:
    executable: '/bin/bash'
  register: 'tsig_key_activate'
  changed_when: tsig_key_activate['rc'] == 2
  failed_when: tsig_key_activate['rc'] == 1
  when:
    - dns_server_role == 'primary'
    - dns_server_tsig_key_name | length > 0
    - dns_server_tsig_key_value | length > 0

- name: "Activate TSIG keys for {{ zone }}"
  ansible.builtin.shell: |
    set -o pipefail
    result=1
    pdnsutil get-meta {{ zone }} AXFR-MASTER-TSIG | grep {{ dns_server_tsig_key_name }}
    ret=$?
    if [ $ret -eq 1 ]
    then
      pdnsutil activate-tsig-key {{ zone }} {{ dns_server_tsig_key_name }} {{ dns_server_role }}
      result=2
    else
      result=0
    fi
    exit $result
  args:
    executable: '/bin/bash'
  register: 'tsig_key_activate'
  changed_when: tsig_key_activate['rc'] == 2
  failed_when: tsig_key_activate['rc'] == 1
  when:
    - dns_server_role == 'slave'
    - dns_server_tsig_key_name | length > 0
    - dns_server_tsig_key_value | length > 0
